{"version":3,"sources":["redux/mainMenuSlice.ts","main/MainMenu.tsx","redux/videoSlice.ts","util/client.js","redux/videoURLSlice.ts","main/Video.tsx","img/placeholder_waveform.png","main/Timeline.tsx","main/CuttingActions.tsx","main/MainContent.tsx","main/Body.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["mainMenuSlice","createSlice","name","initialState","value","reducers","setState","state","action","payload","actions","selectMainMenuState","mainMenuState","MainMenuButton","iconName","stateName","dispatch","useDispatch","activeState","useSelector","mainMenuButtonStyle","backgroundColor","borderRadius","fontSize","width","height","boxShadow","cursor","transitionDuration","transitionProperty","transform","display","flexDirection","justifyContent","alignItems","gap","css","title","onClick","icon","size","MainMenu","style","faFilm","faListUl","faPhotoVideo","faCut","videoSlice","isPlaying","currentlyAt","duration","segments","id","nanoid","startTime","endTime","setIsPlaying","setCurrentlyAt","console","log","setDuration","addSegment","push","cut","currentSegmentIndex","findIndex","element","segmentA","segmentB","splice","selectIsPlaying","videoState","selectCurrentlyAt","selectSegments","client","endpoint","a","body","customConfig","headers","encoded","btoa","unescape","encodeURIComponent","authHeaders","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","fetchVideoURL","createAsyncThunk","videoURLSlice","videoURLs","videoCount","status","error","extraReducers","builder","addCase","pending","fulfilled","previews","reduce","o","uri","length","rejected","selectVideoURL","videoURL","selectVideoCount","selectDuration","VideoPlayer","url","isMuted","useState","ready","setReady","ref","useRef","useEffect","current","seekTo","playing","muted","onProgress","playedSeconds","progressInterval","onDuration","onReady","onEnded","VideoControls","videoControlsRowStyle","padding","faPause","faPlay","Date","toISOString","substr","Video","content","videoURLStatus","className","videoPlayers","i","key","flex","Scrubber","timelineWidth","x","y","controlledPosition","setControlledPosition","wasCurrentlyAtRef","updateXPos","scrubberStyle","position","zIndex","scrubberDragHandleStyle","scrubberDragHandleIconStyle","onStop","e","axis","bounds","disabled","faBars","SegmentsList","segmentsStyle","paddingTop","map","segment","opacity","Timeline","useResizeObserver","timelineStyle","alt","src","myImg","top","CuttingActionsButton","actionName","alignContent","textAlign","CuttingActions","cuttingStyle","cuttingActionsStyle","flexWrap","faEyeSlash","faTrash","MainContent","faTools","renderSwitch","Body","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","mainMenuStateReducer","videoReducer","videoURLReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.e1028526.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\n/**\n * Slice for the main menu state\n */\nexport const mainMenuSlice = createSlice({\n  name: 'mainMenuState',\n  initialState: {\n    value: \"Cutting\"\n  },\n  reducers: {\n    setState: (state, action) => {\n      state.value = action.payload;\n    }\n  }\n})\n\nexport const { setState, } = mainMenuSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectMainMenuState = (state: { mainMenuState: { value: any; }; }) => state.mainMenuState.value\n\nexport default mainMenuSlice.reducer\n\n","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCut, faFilm, faListUl, faPhotoVideo, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n  setState, selectMainMenuState\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for selecting the functionality shown in the main part of the app\n */\nconst MainMenu: React.FC<{}> = () => {\n\n  const mainMenuStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    width: '150px',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    //padding: '20px',\n    gap: '20px',\n    //boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)'\n  };\n\n  return (\n    <div style={mainMenuStyle} title=\"MainMenu\">\n      <MainMenuButton iconName={faFilm} stateName=\"Cutting\"/>\n      <MainMenuButton iconName={faListUl} stateName=\"Metadata\"/>\n      <MainMenuButton iconName={faPhotoVideo} stateName=\"Thumbnail\"/>\n      <MainMenuButton iconName={faCut} stateName=\"Start Workflow\"/>\n    </div>\n  );\n};\n\n/**\n * A button to set the state of the app\n * TODO: Complete Styling\n * @param param0 \n */\nconst MainMenuButton: React.FC<{iconName: IconDefinition, stateName: string}> = ({iconName, stateName}) => {\n\n  const dispatch = useDispatch();\n  const activeState = useSelector(selectMainMenuState)\n\n  const mainMenuButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    fontSize: 'large',\n    width: '100%',\n    height: '150px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    //boxShadow: isActive ? 'inset 0 0 5px #000000' : '0',\n    ...(activeState === stateName) && {\n      backgroundColor: 'lightblue',\n    },\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '10px',\n  };\n\n  return (\n    <div css={mainMenuButtonStyle} title={stateName}         \n      onClick={() => { \n        dispatch(setState(stateName)); \n      }}>\n      <FontAwesomeIcon  icon={iconName} size=\"3x\"/>\n      <div>{stateName}</div>\n    </div>\n  );\n};\n\nexport default MainMenu;","import { createSlice, nanoid } from '@reduxjs/toolkit'\n\nimport { Segment }  from '../types'\n\n/**\n * Slice for the state of the \"video\"\n * Treats the multitude of videos that may exist as one video\n * TODO: Find a way to init the segments array with a starting segment\n */\nexport const videoSlice = createSlice({\n  name: 'videoState',\n  initialState: {\n    isPlaying: false,\n    currentlyAt: 0.0,   // Position in the video in seconds\n    duration: 0.0,      // Video duration in seconds\n    segments: [{id: nanoid(), startTime: 0, endTime: 64.733, state: \"alive\"}]    \n  },\n  reducers: {\n    setIsPlaying: (state, action) => {\n      state.isPlaying = action.payload;\n    },\n    setCurrentlyAt: (state, action) => {\n      console.log(\"Action.payload: \"+action.payload)\n      state.currentlyAt = action.payload;\n    },\n    setDuration: (state, action) => {\n      state.duration = action.payload\n    },\n    addSegment: (state, action) => {\n      state.segments.push(action.payload)\n    },\n    cut: (state) => {\n      // Get index of segment that we are hovering\n      let currentSegmentIndex = state.segments.findIndex(element => \n        element.startTime <= state.currentlyAt && element.endTime >= state.currentlyAt)\n\n      // If we're exactly between two segments, we can't split the current segment\n      if (state.segments[currentSegmentIndex].startTime === state.currentlyAt ||\n          state.segments[currentSegmentIndex].endTime === state.currentlyAt ) {\n        return state;\n      }\n\n      // Make two (new) segments out of it\n      let segmentA : Segment =  {id: nanoid(),\n        startTime: state.segments[currentSegmentIndex].startTime,\n        endTime: state.currentlyAt,\n        state: \"dead\"}\n      let segmentB : Segment =  {id: nanoid(),\n        startTime: state.currentlyAt,\n        endTime: state.segments[currentSegmentIndex].endTime,\n        state: \"dead\"}\n      \n      // Add the new segments and remove the old one\n      state.segments.splice(currentSegmentIndex, 1, segmentA, segmentB);     \n    }\n  }\n})\n\nexport const { setIsPlaying, setCurrentlyAt, setDuration, addSegment, cut } = videoSlice.actions\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport const selectIsPlaying = (state: { videoState: { isPlaying: any; }; }) => state.videoState.isPlaying\nexport const selectCurrentlyAt = (state: { videoState: { currentlyAt: any; }; }) => state.videoState.currentlyAt\n//export const selectDuration = (state: { videoState: { duration: any; }; }) => state.videoState.duration\nexport const selectSegments = (state: { videoState: { segments: any } }) => state.videoState.segments\n\n\nexport default videoSlice.reducer\n\n","// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\n/**\n * Client I stole this form a react tutorial\n */\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const encoded = btoa(unescape(encodeURIComponent(\n    \"admin:opencast\"\n  )));\n  const authHeaders = { 'Authorization': `Basic ${encoded}` };\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n      ...authHeaders,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      return data\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\nimport { client } from '../util/client'\n\n/**\n * EXPERIMENTAL: Slice for fetching stuff from Opencast\n */\nexport interface videoURL {\n  videoURLs: string[],\n  videoCount: number,\n  duration: number,\n  status: string,\n  error: any\n}\n\nconst initialState : videoURL = {\n  videoURLs: [],\n  videoCount: 0,\n  duration: 0,\n  status: 'idle',\n  error: null\n}\n\nexport const fetchVideoURL = createAsyncThunk('videoURL/fetchVideoURL', async () => {\n  const response = await client.get('https://legacy.opencast.org/admin-ng/tools/ID-dual-stream-demo/editor.json')\n  return response\n})\n\nconst videoURLSlice = createSlice({\n  name: 'videoURL',\n  initialState,\n  reducers: {\n  },\n  extraReducers: builder => {\n    builder.addCase(\n      fetchVideoURL.pending, (state, action) => {\n        state.status = 'loading'\n    })\n    builder.addCase(\n      fetchVideoURL.fulfilled, (state, action) => {\n        state.status = 'success'\n        // eslint-disable-next-line no-sequences\n        state.videoURLs = action.payload.previews.reduce((a: string[], o: { uri: string }) => (a.push(o.uri), a), [])\n        state.videoCount = action.payload.previews.length\n        state.duration = action.payload.duration / 1000.0\n    })\n    builder.addCase(\n      fetchVideoURL.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n    })\n  }\n})\n\nexport const selectVideoURL = (state: { videoURL: { videoURLs: string[] } }) => state.videoURL.videoURLs\nexport const selectVideoCount = (state: { videoURL: { videoCount: number } }) => state.videoURL.videoCount\nexport const selectDuration = (state: { videoURL: { duration: number } }) => state.videoURL.duration\n\nexport default videoURLSlice.reducer\n\n\n\n","import React, { useState, useRef, useEffect } from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  selectIsPlaying, selectCurrentlyAt, setIsPlaying, setCurrentlyAt, setDuration\n} from '../redux/videoSlice'\nimport { fetchVideoURL, selectVideoURL, selectVideoCount, selectDuration, } from '../redux/videoURLSlice'\n\nimport ReactPlayer from 'react-player'\n\n/**\n * Container for the videos and their controls\n * TODO: Complete fetching\n * TODO: Move fetching to a more central part of the app\n */\nconst Video: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch()\n  const videoURLs = useSelector(selectVideoURL)\n  const videoCount = useSelector(selectVideoCount)\n  const videoURLStatus = useSelector((state: { videoURL: { status: string } }) => state.videoURL.status);\n  const error = useSelector((state: { videoURL: { error: any } }) => state.videoURL.error)\n\n  // Try to fetch URL from external API\n  useEffect(() => {\n    if (videoURLStatus === 'idle') {\n      dispatch(fetchVideoURL())\n    }\n  }, [videoURLStatus, dispatch])\n\n  // Update based on current fetching status\n  let content\n  if (videoURLStatus === 'loading') {\n    content = <div className=\"loader\">Loading...</div>\n  } else if (videoURLStatus === 'success') {\n    content = \"\"//<div className=\"loader\">Success...</div>\n  } else if (videoURLStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n  \n  // Initialize video players\n  const videoPlayers: JSX.Element[] = [];\n  for (let i = 0; i < videoCount; i++) {  \n    // videoPlayers.push(<VideoPlayer key={i} url='https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4' />);\n    videoPlayers.push(<VideoPlayer key={i} url={videoURLs[i]} isMuted={i === 0 ? true : false}/>);\n  }\n\n  // Style\n  const videoAreaStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '15px',\n    display: 'flex',\n    width: 'auto',\n    flex: '7',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: '10px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)'\n  };\n\n  const videoPlayerAreaStyle = {\n    backgroundColor: 'black',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n  };\n\n  return (\n    <div css={videoAreaStyle} title=\"Video Area\">\n      {content}\n      <div css={videoPlayerAreaStyle} title=\"Video Player Area\">\n        {videoPlayers}\n      </div>\n      <VideoControls />\n    </div>\n  );\n};\n\n/**\n * A single video player\n * @param param0 \n */\nconst VideoPlayer: React.FC<{url: string, isMuted: boolean}> = ({url, isMuted}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  let currentlyAt = useSelector(selectCurrentlyAt)\n  const duration  = useSelector(selectDuration)\n  const [ready, setReady] = useState(false);\n\n  // Init state variables\n  const ref = useRef<ReactPlayer>(null);\n\n  // Callback for when the video is playing\n  const onProgressCallback = (state: { played: number, playedSeconds: number, loaded: number, loadedSeconds:  number }) => {\n    dispatch(setCurrentlyAt(state.playedSeconds))\n  }\n\n  // Callback to get video duration\n  const onDurationCallback = ( duration: number ) => {\n    dispatch(setDuration(duration))\n  }\n\n  // Callback for checking whether the video element is ready\n  const onReadyCallback = () => {\n    setReady(true);\n  }\n\n  const onEndedCallback = () => {\n    dispatch(setIsPlaying(false));\n    dispatch(setCurrentlyAt(duration)); // It seems onEnded is called before the full duration is reached, so we set currentlyAt to the very end\n  }\n\n  useEffect(() => {\n    // Seek if the position in the video got changed externally\n    if(!isPlaying && ref.current && ready) {\n      console.log(\"useEffect seekTO CurrentlyAt: \"+currentlyAt)\n      ref.current.seekTo(currentlyAt, \"seconds\")\n    }\n  })\n\n  return (\n    <ReactPlayer url={url}\n      ref={ref}\n      width='100%'\n      height='auto'\n      playing={isPlaying}\n      muted={isMuted}\n      onProgress={onProgressCallback}\n      progressInterval={100}\n      onDuration={onDurationCallback}\n      onReady={onReadyCallback}\n      onEnded={onEndedCallback}\n    />\n  );\n\n  // return (\n  //   <div title=\"Video Player\">\n  //     <video width=\"320\" height=\"240\" controls ref={vidRef}>\n  //     <source src=\"https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4\" type=\"video/mp4\" />\n  //     Your browser does not support the video tag.\n  //     </video> \n  //   </div>\n  // );\n};\n\n/**\n * Contains controls for manipulating multiple video players at once\n * TODO: Add missing controls\n * TODO: Turn time display into a control\n */\nconst VideoControls: React.FC<{}> = () => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n\n  // Style\n  const videoControlStyle = {\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  }\n\n  const videoControlsRowStyle = {\n    display: 'flex',\n    flexDirection: 'row' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: '100%',\n    padding: '10px',\n  };\n\n  const playButtonStyle = {\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  }\n\n  return (\n    <div css={videoControlStyle} title=\"Video Controls\">\n      <div css={videoControlsRowStyle} title=\"Video Controls Top Row\">\n        <FontAwesomeIcon css={playButtonStyle} icon={isPlaying ? faPause : faPlay} size=\"5x\" \n          onClick={() => dispatch(setIsPlaying(isPlaying ? false : true))} \n        />\n      </div>\n      <div css={videoControlsRowStyle} title=\"Video Controls Bottom Row\">\n        <div>\n          {new Date((currentlyAt ? currentlyAt : 0) * 1000).toISOString().substr(11, 12)}\n        </div>        \n      </div>\n    </div>\n  );\n}\n\nexport default Video;","export default __webpack_public_path__ + \"static/media/placeholder_waveform.d23b087b.png\";","import React, { useState, useRef, useEffect } from 'react'\n\nimport Draggable from 'react-draggable';\n\nimport { css } from '@emotion/core'\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Segment } from '../types'\nimport {\n  selectIsPlaying, selectCurrentlyAt, selectSegments, setCurrentlyAt\n} from '../redux/videoSlice'\n\nimport { selectDuration, } from '../redux/videoURLSlice'\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBars } from \"@fortawesome/free-solid-svg-icons\";\n\nimport useResizeObserver from \"use-resize-observer\";\n\nimport myImg from '../img/placeholder_waveform.png'\n\n/**\n * A container for visualizing the cutting of the video, as well as for controlling\n * the current position in the video\n * Its width corresponds to the duration of the video\n */\nconst Timeline: React.FC<{}> = () => {\n\n  const { ref, width = 1, } = useResizeObserver<HTMLDivElement>();\n\n  const timelineStyle = css({\n    position: 'relative' as 'relative',     // Need to set position for Draggable bounds to work\n    borderRadius: '10px',\n    backgroundColor: 'snow',\n    height: '250px',\n    width: '100%',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    //backgroundImage: `url({myImg})`,\n  });\n  \n  return (\n  <div ref={ref} css={timelineStyle} title=\"Timeline\">\n    <Scrubber timelineWidth={width}/>\n    <div css={{height: '230px'}}>\n      <img alt='waveform2' src={myImg} style={{position: \"absolute\" as \"absolute\", height: '230px', width: '100%', top: '10px'}}></img>\n      <SegmentsList timelineWidth={width}/>\n    </div>\n  </div>\n  );\n};\n\n/**\n * Displays and defines the current position in the video\n * TODO: Fix position fail when starting and then quickly stopping the video\n *       Possibly because state.playedSceonds in Video is faulty for small values\n * TODO: Fix timeline width changes\n * @param param0 \n */\nconst Scrubber: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const dispatch = useDispatch();\n  const isPlaying = useSelector(selectIsPlaying)\n  const currentlyAt = useSelector(selectCurrentlyAt)\n  const duration = useSelector(selectDuration)\n\n  // Init state variables\n  const [controlledPosition, setControlledPosition] = useState({x: 0,y: 0,}); \n  const wasCurrentlyAtRef = useRef(0)\n\n  // Reposition scrubber when the current x position was changed externally\n  useEffect(() => {\n    if(currentlyAt !== wasCurrentlyAtRef.current) {\n      updateXPos();\n      wasCurrentlyAtRef.current = currentlyAt;\n    }\n  })\n\n  // Reposition scrubber when the timeline width changes\n  // useEffect(() => {\n  //   setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y: 0});\n  // }, [timelineWidth])\n\n  // Callback for when the scrubber gets dragged by the user\n  // const onControlledDrag = (e: any, position: any) => {\n  //   const {x, y} = position;\n  //   dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  // };\n\n  // Callback for when the position changes by something other than dragging\n  const updateXPos = () => {\n    const y = controlledPosition.y;\n    setControlledPosition({x: (currentlyAt / duration) * (timelineWidth), y});\n  };\n\n  const onStopDrag = (e: any, position: any) => {\n    const {x, y} = position;\n    setControlledPosition({x, y});\n    dispatch(setCurrentlyAt((x / timelineWidth) * (duration)));\n  }\n\n  const scrubberStyle = css({\n    backgroundColor: 'rgba(255, 0, 0, 1)',\n    height: '250px',\n    width: '1px',\n    position: 'absolute' as 'absolute',\n    zIndex: 1,\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }); \n\n  const scrubberDragHandleStyle = css({\n    backgroundColor: 'rgba(255, 255, 255, 1)',\n    borderRadius: '10px',\n    height: '50px',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n  })\n\n  const scrubberDragHandleIconStyle = css({\n    transform: 'scaleY(1.5) rotate(90deg)',\n    padding: '5px',\n  })\n\n  return (\n    <Draggable \n      //onDrag={onControlledDrag}\n      onStop={onStopDrag}\n      axis=\"x\"\n      bounds=\"parent\"\n      position={controlledPosition}\n      disabled={isPlaying}\n      >\n      <div css={scrubberStyle} title=\"Scrubber\">\n        <div css= {scrubberDragHandleStyle} title=\"dragHandle\">\n          <FontAwesomeIcon css={scrubberDragHandleIconStyle} icon={faBars} size=\"1x\" />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\n/**\n * Container responsible for rendering the segments that are created when cuting\n * TODO: Complete styling\n * TODO: Fix segment width not changing correctly when changing window size\n */\nconst SegmentsList: React.FC<{timelineWidth: number}> = ({timelineWidth}) => {\n\n  // Init redux variables\n  const segments = useSelector(selectSegments)\n  const duration = useSelector(selectDuration)  \n\n  // Render the individual segments\n  const renderedSegments = () => {\n    return (\n      segments.map( (segment: Segment) => (\n        <div key={segment.id} title=\"Segment\" css={{\n          backgroundColor: segment.state === \"alive\" ? 'blue' : 'pink',\n          borderRadius: '25px',\n          width: ((segment.endTime - segment.startTime) / duration) * 100 + '%',\n          height: '230px',\n          opacity: '0.4',\n        }}>\n        </div>\n        \n      ))\n    );\n  }\n\n  const segmentsStyle = css({\n    display: 'flex',\n    flexDirection: 'row' as const,\n    paddingTop: '10px'\n  })\n\n  return (\n    <div css={segmentsStyle} title=\"Segments\">\n      {renderedSegments()}\n    </div>\n  );\n};\n\nexport default Timeline;","import React from \"react\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCut, faEyeSlash, faTrash, IconDefinition } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { css } from '@emotion/core'\n\nimport { useDispatch } from 'react-redux';\nimport {\n  cut\n} from '../redux/videoSlice'\n\n/**\n * Defines the different actions a user can perform while in cutting mode\n * TODO: Shape this like a proper grid\n */\nconst CuttingActions: React.FC<{}> = () => {\n\n    const cuttingStyle =  css({\n      backgroundColor: 'snow',\n      borderRadius: '15px',\n      boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n      flex: '3',\n      display: 'flex',\n      flexDirection: 'column' as const,\n      padding: '20px',\n    })\n\n    const cuttingActionsStyle = css({\n    backgroundColor: 'snow',\n    flex: '3',\n    display: 'flex',\n    flexDirection: 'row' as const,\n    flexWrap: 'wrap' as const,\n    justifyContent: 'space-around',\n    alignContent: 'top',\n    gap: '30px',\n  });\n\n  const textStyle = {\n    textAlign: 'left' as const,\n  }\n\n  return (\n    <div css={cuttingStyle}>\n      <h1 css={textStyle}>Cutting Tools</h1>\n      <div css={cuttingActionsStyle} title=\"CuttingActions\">\n        <CuttingActionsButton iconName={faCut} actionName=\"Cut\" action={cut}/>\n        <CuttingActionsButton iconName={faEyeSlash} actionName=\"Mark as Hidden\" action={cut}/>\n        <CuttingActionsButton iconName={faTrash} actionName=\"Mark as Deleted\" action={cut}/>\n        <CuttingActionsButton iconName={faCut} actionName=\"Some other action\" action={cut}/>\n      </div>\n    </div>\n  );\n};\n\n/**\n * A button representing a single action a user can take while cutting\n * TODO: Add functionality\n * TODO: Complete styling\n * @param param0 \n */\nconst CuttingActionsButton: React.FC<{iconName: IconDefinition, actionName: string, action: any}> = ({iconName, actionName, action}) => {\n\n  const dispatch = useDispatch();\n\n  const cuttingActionButtonStyle = {\n    backgroundColor: 'snow',\n    borderRadius: '10px',\n    //flex: 1,\n    fontSize: 'large',\n    width: '125px',\n    height: '125px',\n    //padding: '20px',\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\n    cursor: \"pointer\",\n    justifyContent: 'center',\n    alignContent: 'center',\n    transitionDuration: \"0.3s\",\n    transitionProperty: \"transform\",\n    \"&:hover\": {\n      transform: 'scale(1.1)',\n    },\n    \"&:active\": {\n      transform: 'scale(0.9)',\n    },\n    display: 'flex',\n    flexDirection: 'column' as const,\n    alignItems: 'center',\n    gap: '10px',\n    textAlign: 'center' as const,\n  };\n\n  return (\n    <div css={cuttingActionButtonStyle} title={actionName} onClick={() => dispatch(action())}>\n      <FontAwesomeIcon icon={iconName} size=\"3x\" />\n      <div>{actionName}</div>\n    </div>\n  );\n};\n\nexport default CuttingActions;","import React from \"react\";\n\nimport Video from './Video';\nimport Timeline from './Timeline';\nimport CuttingActions from './CuttingActions';\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTools} from \"@fortawesome/free-solid-svg-icons\";\n\nimport { useSelector } from 'react-redux'\nimport {\n  selectMainMenuState,\n} from '../redux/mainMenuSlice'\n\n/**\n * A container for the main functionality\n * Holds different components depending on the state off the app\n * TODO: Add component switching\n */\nconst MainContent: React.FC<{}> = () => {\n\n  const mainMenuState = useSelector(selectMainMenuState)\n\n  const mainContentStyle = {\n    flex: '1',\n    display: 'flex',\n    flexDirection: 'column' as const,\n    justifyContent: 'center',\n    alignItems: 'center',\n    gap: '20px',\n  };\n\n\n  const renderSwitch = (state : string) => {\n    switch(state) {\n      case \"Cutting\":\n        return (\n          <>\n            <div css={{width: '100%', display: 'flex', flexDirection: 'row' as const, justifyContent: 'space-around', gap: \"20px\"}}>\n              <Video />\n              <CuttingActions />\n            </div>\n            <Timeline />\n          </>);\n      default:\n        return (\n          <>\n            <FontAwesomeIcon icon={faTools} size=\"10x\" />\n            Under Construction\n          </>);\n    }\n  }\n\n  return (\n    <div css={mainContentStyle} title=\"MainMenuContext\">\n        {renderSwitch(mainMenuState)}\n    </div>\n  );\n};\n\nexport default MainContent;","import React from \"react\";\n\nimport MainMenu from './MainMenu';\nimport MainContent from './MainContent';\n\nconst Body: React.FC<{}> = () => {\n\n  const bodyStyle = {\n    display: 'flex',\n    flex: '1',\n    flexDirection: 'row' as const,\n    padding: '20px',\n    gap: '75px',\n  };\n\n  return (\n    <div css={bodyStyle} title=\"Body\">\n      <MainContent />\n      <MainMenu />\n    </div>\n  );\n};\n\nexport default Body;","import React from 'react';\nimport Body from './main/Body';\n\nfunction App() {\n  return (\n    <div css={{backgroundColor: \"snow\"}} className=\"App\">\n      <Body />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport mainMenuStateReducer from './mainMenuSlice'\nimport videoReducer from './videoSlice'\nimport videoURLReducer from './videoURLSlice'\n\nexport default configureStore({\n  reducer: {\n    mainMenuState: mainMenuStateReducer,\n    videoState: videoReducer,\n    videoURL: videoURLReducer,\n  }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>    \n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}